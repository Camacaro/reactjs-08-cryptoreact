{"version":3,"sources":["componentes/Header.js","componentes/OptionSelect.js","componentes/Formulario.js","componentes/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","OptionSelect","_this$props$moneda","this","moneda","id","name","value","Component","Formulario","monedaRef","React","createRef","criptoRef","cotizarMonedas","e","preventDefault","cotizacion","_this","current","cripto","obtenerValoresCrypto","_this2","onSubmit","ref","disabled","defaultValue","Object","keys","monedas","map","key","componentes_OptionSelect","type","Resultado","mostrarResultado","_this$props$cotizacio","quotes","monedaCotizada","_quotes$monedaCotizad","price","percent_change_1h","percent_change_24h","toFixed","Fragment","App","state","cargando","obtenerMonedas","_callee","regenerator_default","wrap","_context","prev","next","axios","get","then","respuesta","setState","data","catch","err","console","log","stop","_callee2","url","_context2","concat","setTimeout","resultado","componentes_Resultado","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQAYeA,EAVA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,IAA8BJ,EAAMK,OAApC,QCODC,mLAVF,IAAAC,EACcC,KAAKR,MAAMS,OAAvBC,EADFH,EACEG,GAAIC,EADNJ,EACMI,KACX,OACIV,EAAAC,EAAAC,cAAA,UAAQS,MAAOF,GACVC,UALUE,aCuDZC,6MApDXC,UAAYC,IAAMC,cAClBC,UAAYF,IAAMC,cAElBE,eAAiB,SAACC,GACdA,EAAEC,iBAGF,IAAMC,EAAa,CACfb,OAAQc,EAAKR,UAAUS,QAAQZ,MAC/Ba,OAAQF,EAAKL,UAAUM,QAAQZ,OAInCW,EAAKvB,MAAM0B,qBAAqBJ,4EAG3B,IAAAK,EAAAnB,KACL,OACIP,EAAAC,EAAAC,cAAA,QAAMyB,SAAUpB,KAAKW,gBACjBlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAQ0B,IAAKrB,KAAKO,UAAWX,UAAU,gBACnCH,EAAAC,EAAAC,cAAA,UAAQS,MAAM,GAAGkB,UAAQ,EAACC,cAAY,GAAtC,mBACA9B,EAAAC,EAAAC,cAAA,UAAQS,MAAM,OAAd,iBACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,OAAd,wBACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,OAAd,UACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,OAAd,WAIRX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,UAAQ0B,IAAKrB,KAAKU,UAAWd,UAAU,gBAClC4B,OAAOC,KAAKzB,KAAKR,MAAMkC,SAASC,IAAI,SAAAC,GAAG,OAEpCnC,EAAAC,EAAAC,cAACkC,EAAD,CACID,IAAOA,EACP3B,OAAUkB,EAAK3B,MAAMkC,QAAQE,SAO7CnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,SAASlC,UAAU,kBAAkBQ,MAAM,qBA/ClDC,6BCkCV0B,6MAjCXC,iBAAmB,WAAM,IAAAC,EAEElB,EAAKvB,MAAMsB,WAA3BX,EAFc8B,EAEd9B,KAAM+B,EAFQD,EAERC,OACPC,EAAiBpB,EAAKvB,MAAM2C,eAElC,IAAIhC,EACA,OAAO,KANU,IAAAiC,EASkCF,EAAOC,GAAvDE,EATcD,EASdC,MAAOC,EATOF,EASPE,kBAAmBC,EATZH,EASYG,mBAEjC,OACI9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,aACAH,EAAAC,EAAAC,cAAA,aAAIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,iBAAkDO,EAAlD,OAA4DgC,EAA5D,QAAJ,MAA+FE,EAAOG,QAAQ,GAA9G,KACA/C,EAAAC,EAAAC,cAAA,aAAIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,+BAAJ,IAAwE0C,EAAxE,OACA7C,EAAAC,EAAAC,cAAA,aAAIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,gCAAJ,IAAyE2C,EAAzE,kFAQZ,OACI9C,EAAAC,EAAAC,cAACF,EAAAC,EAAM+C,SAAP,KACKzC,KAAKgC,2BA7BE3B,aCmHTqC,6MA7GdC,MAAQ,CACPjB,QAAQ,GACRZ,WAAW,GACXqB,eAAe,GACfS,UAAS,KAOVC,oCAAiB,SAAAC,IAAA,OAAAC,EAAArD,EAAAsD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,uDAAAF,EAAAE,KAAA,EAGVC,IAAMC,IAHI,2CAIdC,KAAK,SAAAC,GACLxC,EAAKyC,SAAS,CACb9B,QAAQ6B,EAAUE,KAAKA,SAGxBC,MAAM,SAAAC,GACNC,QAAQC,IAAIF,KAVE,wBAAAV,EAAAa,SAAAhB,QAejB5B,2DAAuB,SAAA6C,EAAOrC,GAAP,IAAAzB,EAAAgB,EAAA+C,EAAA,OAAAjB,EAAArD,EAAAsD,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,cAEflD,EAAkByB,EAAlBzB,OAAQgB,EAAUS,EAAVT,OAET+C,EAJgB,2CAAAE,OAIkCjD,EAJlC,cAAAiD,OAIqDjE,GAJrDgE,EAAAd,KAAA,EAYhBC,IAAMC,IAAIW,GACdV,KAAK,SAAAC,GAQLxC,EAAKyC,SAAS,CACbZ,UAAS,IAIVuB,WAAW,WACVpD,EAAKyC,SAAS,CACb1C,WAAYyC,EAAUE,KAAKA,KAC3BtB,eAAgBlC,EAChB2C,UAAS,KAER,OAEHc,MAAM,SAAAC,GACNC,QAAQC,IAAIF,KAnCQ,wBAAAM,EAAAH,SAAAC,uPAlBtB/D,KAAK6C,oJA2DL,IAEIuB,EAkBJ,OAfCA,EALgBpE,KAAK2C,MAAMC,SAKfnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAGPH,EAAAC,EAAAC,cAAC0E,EAAD,CACRvD,WAAcd,KAAK2C,MAAM7B,WACzBqB,eAAkBnC,KAAK2C,MAAMR,iBAMjC1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAC2E,EAAD,CACCzE,OAAO,qCAGRJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CACdH,EAAAC,EAAAC,cAAC4E,EAAD,CACC7C,QAAW1B,KAAK2C,MAAMjB,QACtBR,qBAAwBlB,KAAKkB,uBAG7BkD,YAtGW/D,aCMEmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrF,EAAAC,EAAAC,cAACoF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.723354c9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <header>\r\n                <h1 className=\"text-center\"> {props.titulo} </h1>\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass OptionSelect extends Component {\r\n    render() {\r\n        const {id, name} = this.props.moneda;\r\n        return (\r\n            <option value={id}>\r\n                {name}\r\n            </option>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OptionSelect;","import React, { Component } from 'react';\r\nimport OptionSelect from './OptionSelect';\r\n\r\nclass Formulario extends Component {\r\n    \r\n    monedaRef = React.createRef();\r\n    criptoRef = React.createRef();\r\n\r\n    cotizarMonedas = (e) => {\r\n        e.preventDefault();\r\n\r\n        /**Crear Objeto */\r\n        const cotizacion = {\r\n            moneda: this.monedaRef.current.value,\r\n            cripto: this.criptoRef.current.value\r\n        }\r\n\r\n        /**Enivar hacia app */\r\n        this.props.obtenerValoresCrypto(cotizacion);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form onSubmit={this.cotizarMonedas}>\r\n                <div className=\"form-group\">\r\n                    <label>Moneda: </label>\r\n                    <select ref={this.monedaRef} className=\"form-control\">\r\n                        <option value=\"\" disabled defaultValue>Elige tu Moneda</option>\r\n                        <option value=\"MXN\">Peso Mexicano</option>\r\n                        <option value=\"USD\">Dolar EstadoUnidense</option>\r\n                        <option value=\"GBP\">Libras</option>\r\n                        <option value=\"EUR\">Euros</option>\r\n                    </select>\r\n                </div> \r\n\r\n                <div className=\"form-group\">\r\n                    <label>Criptomoneda: </label>\r\n                    <select ref={this.criptoRef} className=\"form-control\">\r\n                        {Object.keys(this.props.monedas).map(key => (\r\n                            \r\n                            <OptionSelect\r\n                                key = {key}\r\n                                moneda = {this.props.monedas[key]}\r\n                            />\r\n\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" className=\"btn btn-primary\" value=\"Cotizar\" />\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Formulario;","import React, { Component } from 'react';\r\n\r\nclass Resultado extends Component {\r\n    \r\n    mostrarResultado = () => {\r\n\r\n        const {name, quotes} = this.props.cotizacion;\r\n        const monedaCotizada = this.props.monedaCotizada;\r\n\r\n        if(!name){\r\n            return null;\r\n        }\r\n\r\n        const {price, percent_change_1h, percent_change_24h} = quotes[monedaCotizada];\r\n\r\n        return (\r\n            <div className=\"bg-success py-4\">\r\n                <div className=\"resumen text-light text-center\">\r\n                    <h2 className=\"mb-4\"> Resumen </h2>\r\n                    <p> <span className=\"font-weight-bold\"> El precio de {name} en {monedaCotizada} es:</span> $ {(price).toFixed(2)} </p>\r\n                    <p> <span className=\"font-weight-bold\"> Porcentaje Última Hora:</span> {percent_change_1h} % </p>\r\n                    <p> <span className=\"font-weight-bold\"> Porcentaje Últimas 24h: </span> {percent_change_24h} % </p>\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.mostrarResultado()}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Resultado;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport axios from 'axios';\nimport Resultado from './componentes/Resultado';\n\nclass App extends Component {\n\n\tstate = {\n\t\tmonedas:[],\n\t\tcotizacion:{},\n\t\tmonedaCotizada:'',\n\t\tcargando:false\n\t}\n\t\n\tasync componentDidMount(){\n\t\tthis.obtenerMonedas();\n\t}\n\n\tobtenerMonedas = async () => {\n\t\tconst url = `https://api.coinmarketcap.com/v2/ticker`;\n\n\t\tawait axios.get(url)\n\t\t\t.then(respuesta => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tmonedas:respuesta.data.data\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t}\n\n\t/** Cotizar una crypto en base a una moneda */\n\tobtenerValoresCrypto = async (monedas) => {\n\n\t\tconst {moneda, cripto} = monedas;\n\n\t\tconst url  = `https://api.coinmarketcap.com/v2/ticker/${cripto}/?convert=${moneda}`;\n\n\t\t/**Aqui va en la vida real, antes de cargar la peticion, para que aparezca el mensaje de cargando */\n\t\t/*this.setState({\n\t\t\tcargando:true\n\t\t});*/\n\n\n\t\tawait axios.get(url)\n\t\t\t.then(respuesta => {\n\t\t\t\t/**Esto va con la vida real */\n\t\t\t\t/*this.setState({\n\t\t\t\t\tcotizacion: respuesta.data.data,\n\t\t\t\t\tmonedaCotizada: moneda,\n\t\t\t\t\tcargando:false\n\t\t\t\t});*/\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tcargando:true\n\t\t\t\t});\n\n\t\t\t\t/**Simular que esta tardando la peticion */\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcotizacion: respuesta.data.data,\n\t\t\t\t\t\tmonedaCotizada: moneda,\n\t\t\t\t\t\tcargando:false\n\t\t\t\t\t});\n\t\t\t\t}, 3000);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t}\n\t\n\trender() {\n\n\t\tconst cargando = this.state.cargando;\n\n\t\tlet resultado;\n\n\t\tif(cargando){\n\t\t\tresultado = <div className=\"spinner\">\n\t\t\t\t\t\t\t<div className=\"rect1\"></div>\n\t\t\t\t\t\t\t<div className=\"rect2\"></div>\n\t\t\t\t\t\t\t<div className=\"rect3\"></div>\n\t\t\t\t\t\t\t<div className=\"rect4\"></div>\n\t\t\t\t\t\t\t<div className=\"rect5\"></div>\n\t\t\t\t\t\t</div>\n\t\t}else{\n\t\t\tresultado = <Resultado\n\t\t\t\t\t\t\tcotizacion = {this.state.cotizacion}\n\t\t\t\t\t\t\tmonedaCotizada = {this.state.monedaCotizada}\n\t\t\t\t\t\t/>\t\t\n\t\t}\n\n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<Header\n\t\t\t\t\ttitulo=\"Cotiza Criptomonedas al Instante\"\n\t\t\t\t/>\n\n\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t<div className=\"col-md-6 bg-light pb-4 contenido-principal\">\n\t\t\t\t\t\t<Formulario\n\t\t\t\t\t\t\tmonedas = {this.state.monedas}\n\t\t\t\t\t\t\tobtenerValoresCrypto = {this.obtenerValoresCrypto}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{resultado}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}